import os
import getpass
import hashlib
import platform
import toml
from pathlib import Path
from datetime import datetime
from pysb.core import SelfExporter
from microbench import MicroBench, MBHostInfo, MBPythonVersion
import io
import json
import pysb, numpy, scipy, sympy


class QSPyBench(MicroBench, MBPythonVersion, MBHostInfo):
    capture_versions = (pysb, numpy, scipy, sympy)


METADATA_DIR = ".qspy"


class ModelMetadataTracker:
    def __init__(
        self, version="0.1.0", author=None, export_toml=False, capture_conda_env=False
    ):
        self.model = SelfExporter.default_model
        if not self.model:
            raise RuntimeError("No model found in the current SelfExporter context")
        self.version = version
        self.author = author or "unknown"
        self.current_user = getpass.getuser()
        self.timestamp = datetime.now().isoformat()
        self.hash = self.compute_model_hash()
        self.env_metadata = self.capture_environment()

        if capture_conda_env:
            conda_env = os.environ.get("CONDA_DEFAULT_ENV", None)
            if conda_env:
                self.env_metadata["conda_env"] = conda_env

        self.metadata = {
            "version": self.version,
            "author": self.author,
            "current_user": self.current_user,
            "created_at": self.timestamp,
            "hash": self.hash,
            "model_name": self.model.name or "unnamed_model",
            "env": self.env_metadata,
        }

        # Attach the metadata tracker to the model
        setattr(self.model, "qspy_metadata_tracker", self)

        if export_toml:
            self.export_metadata_toml()

    def compute_model_hash(self):
        """Create a hash from model definition (rules + parameters)."""
        s = repr(self.model.rules) + repr(self.model.parameters)
        return hashlib.sha256(s.encode()).hexdigest()

    def capture_environment(self):
        """Capture execution environment via microbench."""
        bench = QSPyBench()

        @bench
        def noop():
            pass

        noop()
        bench.outfile.seek(0)
        metadata = bench.outfile.read()
        if metadata == "":
            return {"microbench": "No metadata captured."}
        else:
            return json.loads(metadata)

    def export_metadata_toml(self, path=None, use_metadata_dir=True):
        """Export metadata to a TOML file with autogenerated filename if none is provided."""
        metadata_dir = Path(METADATA_DIR) if use_metadata_dir else Path(".")
        metadata_dir.mkdir(parents=True, exist_ok=True)

        if path is None:
            safe_author = self.author.replace(" ", "_")
            safe_name = (self.model.name or "model").replace(" ", "_")
            short_hash = self.hash[:8]
            safe_time = self.timestamp.replace(":", "-")
            filename = f"{safe_name}__{safe_author}__{short_hash}__{safe_time}.toml"
            path = metadata_dir / filename

        with open(path, "w") as f:
            toml.dump(self.metadata, f)

    @staticmethod
    def load_metadata_toml(path):
        with open(path, "r") as f:
            return toml.load(f)
